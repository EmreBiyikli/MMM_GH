// Copyright (C) 2011-2014 University of Pittsburgh. All rights reserved.
// See COPYING.txt for details.
// Author: Emre Biyikli (biyikli.emre@gmail.com)

// select.h
// *****************************************************************************
// (independent)
// Consists of Select class that handles the selections. In addition to the
// construction of the class, it needs to be initialized by the Init function.
// The class has many selection functions for various selection styles. Results
// of each selection is saved in 2-D vector selection_. Each selection is
// saved is at the first dimension of selection_ referred to as ID.

#ifndef MMM_V14_6_SELECT_H_
#define MMM_V14_6_SELECT_H_

#include <algorithm>
#include <string>
#include <vector>

using std::sort;
using std::string;
using std::vector;

// See comment at top of file for a complete description.
class Select {
 public:
  const int kMaxSelectionNum = 100;  // maximum number of selections

  Select() {}
  ~Select() {}

  // This disallows copy and assign of the class.
  // TODO: activate with C++11 compiler
  // Select(Select&) = delete;
  // Select& operator=(const Select&) = delete;

  // Returns positions of the input selection.
  void GetPosition(int ID, vector<double>* atom_list_position);
  // Initializes the class by initializing the atom positions.
  void Init(const vector<double> &position);
  // Selects atoms within the input block coordinates.
  void SelectBlock(int ID, vector<double> block);
  // Reads a selection from the input_file.
  void SelectFile(int ID, string input_file);
  // Selects from atoms inside the input selection those are closest to a grid
  // generated by the input grid size.
  void SelectGrid(int ID, int in_ID, vector<double> grid);
  // Selects atoms with the IDs in the input expression.
  void SelectID(int ID, vector<string> expression);
  // Selects from atoms inside the input selection those are within the input
  // radius of input center_ID atoms. Selection does not include the center_ID
  // atoms.
  void SelectRadial(double radius, int ID, int in_ID, int center_ID);
  // Subtracts selection with ID 2 from selection with ID 1.
  void SelectSubtract(int ID, int ID_1, int ID_2);
  // Selects atoms from input surface within the input depth.
  void SelectSurface(int ID, double depth, string surface);
  // Unites selections with ID 1 and 2.
  void SelectUnite(int ID, int ID_1, int ID_2);
  // Sorts and unifies the atoms in the input selection.
  void SelectSortAndUnique(int ID);

  // Accessor and mutator functions of selection_
  vector<int>* selection_address(int ID) { return &selection_[ID]; }
  const vector<int>& selection(int ID) const { return selection_[ID]; }
  int selection_at(int ID, int atom) const { return selection_[ID][atom]; }
  int selection_size(int ID) const { return selection_[ID].size(); }
  void set_selection(int ID, vector<int> vector) { selection_[ID] = vector; }
  void push_selection(int ID, int atom) { selection_[ID].push_back(atom); }
  void resize_selection(int size) { selection_.resize(size); }
  void insert_selection(int ID, const vector<int>& vector) {
    selection_[ID].insert(selection_[ID].end(), vector.begin(), vector.end());
  }
  void sort_selection(int ID) {
    sort(selection_[ID].begin(), selection_[ID].end());
  }
  void unique_selection(int ID) {
    selection_[ID].resize((unique(selection_[ID].begin(),
                                  selection_[ID].end())) -
                                      selection_[ID].begin());
  }

 private:
  // Returns boundaries of the positions of the atoms in the selection.
  vector<double> GetBoundary(int ID);

  // Accessor and mutator functions:
  // atom_num_
  int atom_num() const { return atom_num_; }
  void set_atom_num(int atom_num) { atom_num_ = atom_num; }
  // position_
  double position(int atom, int dimension) const {
    return (*position_)[3 * atom + dimension];
  }
  void set_position(const vector<double>& position) { position_ = &position; }

  const vector<double>* position_;  // positions of atoms
  int atom_num_;                    // atom number
  vector< vector<int> > selection_;   // selections
};

#endif  // MMM_V14_6_SELECT_H_

